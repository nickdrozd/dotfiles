[core]
	editor = vim
	hooksPath = ~/git_hooks
	excludesfile = ~/.gitignore-global

[rebase]
	autosquash = true
	autostash = true

[pull]
rebase = true

[alias]
	alias = config --get-regexp ^alias

	remotes = remote -v

	ls = log --oneline -n 10

	st = status

	cm = commit -m
	cf = commit --fixup

	ch = checkout
	discard = checkout --
	new-branch = checkout -b

	branches = branch -a
	delete-branch = branch -D
	rename-branch = branch -m

	add-all = add -u
	add-everything = add -A
	patch = add -p

	unstage = reset HEAD
	staged = diff --cached

	chrp = cherry-pick

	# for instance, `git gethash :/keyword` -> ae7893
	gethash = rev-parse --short --verify

    # list the files altered in the commit, eg `git files HEAD~2`
	files = "!f() { git diff-tree --no-commit-id --name-only -r $(git rev-parse --short --verify "$1"); }; f"

	rb = rebase
	rbcont = rebase --continue
	rbabort = rebase --abort

    # rebase the most recent n commits
    # (this requires manual counting, which isn't great)
	fix = "!f() { git rebase -i HEAD~"$1"; }; f"

	rbmaster = "!f() { echo "fetching upstream/master..." &&  git fetch upstream master &&  echo "rebasing on upstream/master..." && git rebase upstream/master; }; f"

    # pull PR #n and get into its branch
    # usage: `git pr pr-number branch-name`
	pr = "!f() { git fetch upstream pull/"$1"/head:"$2" && git checkout "$2"; }; f"

    # echo the length of the most recent commit's commit message
	msglen = "!f() { msg=$(git log -n 1 --pretty=format:%s); echo "$msg -- $(echo $msg | wc -c)"; }; f"
